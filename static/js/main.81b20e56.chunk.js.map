{"version":3,"sources":["img/0.jpg","img/1.jpg","img/2.jpg","img/3.jpg","img/4.jpg","img/5.jpg","img/6.jpg","helpers/words.js","components/Hangman.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","words","getWord","Math","floor","random","length","toUpperCase","Hangman","state","numWrong","guessed","Set","answer","answerWord","_this","split","map","ltr","has","createButtons","react_default","a","createElement","key","value","onClick","handleGuess","disabled","className","event","guess","target","wrong","word","guessedSoFar","setState","add","includes","handleRestart","imgSrc","this","props","images","altTxt","concat","gameOver","maxWrong","isWinner","join","gameState","src","alt","Component","defaultProps","img0","img1","img2","img3","img4","img5","img6","App","src_components_Hangman","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81b20e56.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.db9097e8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1.fbff4784.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.c4ea9528.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.62a781c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.0f8ca81e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.1b557aa7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.c80394c2.jpg\";","const words = [\r\n    \"Arya Stark\",\r\n    \"Sandor Clegane\",\r\n    \"Tywin Lannister\",\r\n    \"Lord of Light\",\r\n    \"Red Wedding\",\r\n    \"Trial By Combat\",\r\n    \"Castle Black\",\r\n    \"The Nights Watch\",\r\n    \"White Walkers\",\r\n    \"Iron Throne\",\r\n    \"High Garden\",\r\n    \"Winterfell\",\r\n    \"Oberyn Martel\",\r\n    \"The Mountain\",\r\n    \"Dragon Glass\",\r\n    \"Longclaw\",\r\n    \"Tormund Giantsbane\",\r\n    \"Kings Landing\",\r\n    \"Euron Greyjoy\",\r\n    \"The Golden Company\",\r\n    \"Sansa Stark\",\r\n    \"Ser Bronn Of The Blackwater\",\r\n    \"Littlefinger\",\r\n    \"King Joffrey\",\r\n    \"The Three Eyed Raven\",\r\n    \"Valyrian Steel\",\r\n    \"Tyrion Lannister\",\r\n    \"Ser Arthur Dayne\",\r\n    \"The Sword Of The Morning\",\r\n    \"Rhaegar Targaryen\",\r\n    \"Dothrakis\",\r\n    \"Jorah Mormont\",\r\n    \"Theon Greyjoy\",\r\n    \"Needle\",\r\n    \"Direwolf\",\r\n    \"Casterly Rock\",\r\n    \"Eddard Stark\",\r\n    \"Ramsey Snow\",\r\n    \"The Battle Of The Bastards\",\r\n    \"Stannis Baratheon\",\r\n    \"Thoros Of Myr\",\r\n    \"Beric Dondarrion\",\r\n    \"The Brotherhood Without Banners\",\r\n    \"Grand Maester Pycelle\",\r\n    \"Jamie Lannister\",\r\n    \"Cersei Lannister\",\r\n    \"A Song Of Ice And Fire\",\r\n    \"The Night King\",\r\n    \"The High Sparrow\",\r\n    \"Ser Barristan Selmy\",\r\n    \"Khal Drogo\",\r\n    \"Brienne Of Tarth\"\r\n];\r\n\r\nfunction getWord() {\r\n    return words[Math.floor(Math.random() * words.length)].toUpperCase();\r\n}\r\n\r\nexport { getWord };","import React, { Component } from 'react';\r\nimport { getWord } from '../helpers/words';\r\nimport img0 from \"../img/0.jpg\";\r\nimport img1 from \"../img/1.jpg\";\r\nimport img2 from \"../img/2.jpg\";\r\nimport img3 from \"../img/3.jpg\";\r\nimport img4 from \"../img/4.jpg\";\r\nimport img5 from \"../img/5.jpg\";\r\nimport img6 from \"../img/6.jpg\";\r\nimport './Hangman.css';\r\n\r\nclass Hangman extends Component {\r\n\r\n    static defaultProps = {\r\n        maxWrong: 6,\r\n        images: [img0, img1, img2, img3, img4, img5, img6]\r\n    };\r\n\r\n    state = {\r\n        numWrong: 0,\r\n        guessed: new Set(\" \"),\r\n        answer: getWord()\r\n    }\r\n\r\n    answerWord = () => {\r\n        return this.state.answer\r\n        .split(\"\")\r\n        .map(ltr => (this.state.guessed.has(ltr) ? ltr : \"_\"));\r\n    }\r\n\r\n    createButtons = () => {\r\n        return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\").map(ltr => (\r\n            <button\r\n            key={ltr}\r\n            value={ltr}\r\n            onClick={this.handleGuess}\r\n            disabled={this.state.guessed.has(ltr)}\r\n            className={this.state.guessed.has(ltr) ? \"disabled\" : \"letter-btn\"}\r\n            // style={{backgroundColor: 'steelblue',\r\n            //         fontSize: '25px',\r\n            //         border: '1px solid crimson',\r\n            //         color: 'white',\r\n            //         margin: '0px 5px',\r\n            //         padding: '5px'}}\r\n            >\r\n            {ltr}\r\n            </button>));\r\n    }\r\n\r\n    handleGuess = (event) => {\r\n        let guess = event.target.value;\r\n        let wrong = this.state.numWrong;\r\n        let word = this.state.answer;\r\n        let guessedSoFar = this.state.guessed;\r\n\r\n        this.setState({\r\n            guessed: guessedSoFar.add(guess),\r\n            numWrong: wrong + (word.includes(guess) ? 0 : 1)\r\n        })\r\n\r\n        //BETTER WAY USING STATE IN A FUNCTION\r\n        // this.setState(st => ({\r\n        //     guessed: st.guessed.add(guess),\r\n        //     numWrong: st.numWrong + (st.answer.includes(guess) ? 0 : 1)\r\n        //   }));\r\n        \r\n    }\r\n\r\n    handleRestart = () => {\r\n        this.setState({\r\n            numWrong: 0,\r\n            guessed: new Set(\" \"),\r\n            answer: getWord()\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let imgSrc = this.props.images[this.state.numWrong];\r\n        let altTxt = `${this.state.numWrong}/6`\r\n        const gameOver = this.state.numWrong >= this.props.maxWrong;\r\n        const isWinner = this.answerWord().join(\"\") === this.state.answer;\r\n        let gameState = this.createButtons();\r\n        if(isWinner) gameState = 'You Win!';\r\n        if(gameOver) gameState = 'You Lose!';\r\n        \r\n        return(\r\n            <div className=\"hangman-div\">\r\n                <div className=\"bimg-div\">\r\n                    <img src={imgSrc} alt={altTxt}></img>\r\n                    <p>Wrong Guesses: {this.state.numWrong}</p>\r\n                    <p className=\"Picked-word\">{gameOver ? this\r\n                    .state.answer : this.answerWord()}</p>\r\n                </div>\r\n                \r\n                <div className=\"btn-div\">\r\n                    <p className=\"Hangman-buttons\">{gameState}</p>\r\n                    <button className=\"Btn-restart\" onClick={this.handleRestart}>RESTART</button>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Hangman;\r\n","import React from 'react';\nimport './App.css';\nimport Hangman from './components/Hangman';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hangman />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}